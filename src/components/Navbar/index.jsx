import React, { useEffect, useState } from 'react'
import "./navbar.css"
import { Icons, links } from '../../helper';

const Navbar = () => {
  const [isClicked, setIsClicked] = useState(false);
  const [brightness, setBrightness] = useState(false);

  useEffect(() => {
    function setTextAnimation(delay, duration, strokeWidth, timingFunction, strokeColor, repeat) {
      let paths = document.getElementsByClassName("path");
      let mode = repeat ? 'infinite' : 'forwards'
      for (let i = 0; i < paths.length; i++) {
        const path = paths[i];
        const length = path.getTotalLength();
        path.style["stroke-dashoffset"] = `${length}px`;
        path.style["stroke-dasharray"] = `${length}px`;
        path.style["stroke-width"] = `${strokeWidth}px`;
        path.style["stroke"] = `${strokeColor}`;
        path.style["animation"] = `${duration}s svg-text-anim ${mode} ${timingFunction}`;
        path.style["animation-delay"] = `${i * delay}s`;
      }
    }
    setTextAnimation(0.95, 2.2, 2, 'ease-in-out', '#505a8b', false);
  }, [])


  const navLinkClassName = isClicked ? `nav__links active` : `nav__links`;

  return (
    <nav className='poppins-regular'>

      <div className="nav__logo center">
        <a href="#">

          <svg width="54.027" height="25.581" viewBox="0 0 54.027 25.581" xmlns="http://www.w3.org/2000/svg">
            <g id="svgGroup" stroke-linecap="round" fill-rule="evenodd" font-size="9pt" stroke="#000" stroke-width="0.25mm" fill="none" style={{ "stroke": "#000", "stroke-width": "0.25mm", "fill": "none" }}>
              <path className="path" d="M 24.653 0 Q 24.618 0.49 24.355 0.56 A 1.319 1.319 0 0 1 24.167 0.595 Q 24.003 0.614 23.802 0.602 A 2.999 2.999 0 0 1 23.708 0.595 L 23.305 0.595 Q 23.078 0.595 22.868 0.665 Q 20.208 1.4 17.548 2.485 A 33.137 33.137 0 0 0 12.723 4.916 A 30.742 30.742 0 0 0 12.578 5.005 A 20.8 20.8 0 0 0 9.758 7.091 A 17.885 17.885 0 0 0 8.588 8.225 A 26.502 26.502 0 0 0 10.206 10.773 A 29.909 29.909 0 0 0 10.635 11.357 Q 11.808 12.915 12.98 14.612 Q 14.153 16.31 14.958 18.27 Q 15.553 19.635 15.78 21.035 Q 15.965 22.174 15.606 23.359 A 6.414 6.414 0 0 1 15.413 23.905 Q 14.853 24.535 14.223 25.095 A 1.616 1.616 0 0 0 14.044 25.085 A 1.53 1.53 0 0 0 13.61 25.147 Q 13.313 25.235 13.033 25.34 Q 12.683 25.445 12.333 25.532 A 1.642 1.642 0 0 1 11.933 25.581 Q 11.779 25.581 11.619 25.554 A 2.044 2.044 0 0 1 11.598 25.55 Q 11.283 25.48 11.038 25.305 A 2.955 2.955 0 0 0 10.704 25.1 A 3.63 3.63 0 0 0 10.478 24.99 A 44.919 44.919 0 0 0 8.639 24.347 A 54.389 54.389 0 0 0 7.45 23.975 A 10.271 10.271 0 0 1 6.036 23.439 A 7.627 7.627 0 0 1 4.703 22.645 Q 3.82 22.554 3.202 22.224 A 2.824 2.824 0 0 1 3.023 22.12 Q 2.358 21.7 1.745 21.227 Q 1.133 20.755 0.223 20.44 A 0.646 0.646 0 0 1 0.077 20.275 Q -0.075 20.024 0.073 19.664 A 1.445 1.445 0 0 1 0.118 19.565 A 11.261 11.261 0 0 1 0.509 18.851 A 13.561 13.561 0 0 1 0.783 18.41 L 0.993 18.095 A 2.892 2.892 0 0 0 1.966 18.821 A 3.447 3.447 0 0 0 2.148 18.9 Q 2.848 19.18 3.303 19.67 A 0.561 0.561 0 0 1 3.407 19.655 Q 3.657 19.64 4.036 19.811 A 3.113 3.113 0 0 1 4.073 19.828 Q 4.563 20.055 5.035 20.335 Q 5.508 20.615 5.718 20.79 A 171.598 171.598 0 0 1 6.959 21.089 Q 7.594 21.245 8.301 21.422 A 300.398 300.398 0 0 1 8.78 21.542 A 15.564 15.564 0 0 0 11.33 21.972 A 13.838 13.838 0 0 0 12.158 22.015 Q 12.543 21.77 12.613 21.227 A 4.227 4.227 0 0 0 12.643 20.879 Q 12.656 20.593 12.637 20.262 A 8.209 8.209 0 0 0 12.613 19.95 A 8.752 8.752 0 0 0 12.055 17.64 A 7.962 7.962 0 0 0 11.738 16.94 Q 11.038 15.575 10.145 14.332 Q 9.253 13.09 8.413 11.865 A 4.026 4.026 0 0 1 8.231 11.602 A 3.691 3.691 0 0 1 8.22 11.585 A 2.539 2.539 0 0 0 8.147 11.475 Q 8.106 11.415 8.056 11.35 A 4.771 4.771 0 0 0 7.993 11.27 A 19.72 19.72 0 0 1 7.181 9.998 A 22.831 22.831 0 0 1 6.908 9.52 Q 6.383 8.575 6.243 7.525 Q 6.104 6.481 6.726 5.333 A 5.581 5.581 0 0 1 6.733 5.32 A 16.253 16.253 0 0 1 10.945 2.64 A 18.768 18.768 0 0 1 11.738 2.31 A 29.618 29.618 0 0 1 16.5 0.912 A 34.106 34.106 0 0 1 17.933 0.648 Q 21.258 0.105 24.653 0 Z" id="0" vector-effect="non-scaling-stroke" />
              <path className='path' d="M 54.027 2.381 A 2.177 2.177 0 0 0 53.808 1.435 L 53.755 1.68 Q 53.703 1.925 53.528 2.1 A 0.161 0.161 0 0 1 53.524 2.087 Q 53.505 2.008 53.56 1.891 A 0.804 0.804 0 0 1 53.598 1.82 Q 53.657 1.702 53.567 1.659 A 0.204 0.204 0 0 0 53.528 1.645 A 11.141 11.141 0 0 1 53.219 2.483 A 13.564 13.564 0 0 1 52.548 3.867 Q 52.075 4.721 51.741 5.288 A 25.703 25.703 0 0 1 51.533 5.635 Q 51.323 6.3 50.833 7.175 Q 50.343 8.05 49.853 8.96 A 10.736 10.736 0 0 0 49.823 9.017 Q 49.597 9.442 49.433 9.844 A 6.64 6.64 0 0 0 49.153 10.675 A 0.291 0.291 0 0 0 48.945 10.758 A 0.433 0.433 0 0 0 48.873 10.85 A 5.038 5.038 0 0 0 48.791 10.992 A 6.222 6.222 0 0 0 48.663 11.235 Q 47.683 13.09 46.703 14.875 Q 45.723 16.66 44.673 18.375 Q 44.323 18.97 43.99 19.617 Q 43.658 20.265 43.063 20.65 A 46.793 46.793 0 0 0 42.92 19.993 A 41.41 41.41 0 0 0 42.45 18.112 Q 42.118 16.905 41.803 15.435 A 13.272 13.272 0 0 1 41.723 15.056 Q 41.658 14.725 41.598 14.343 A 27.206 27.206 0 0 1 41.488 13.562 A 293.153 293.153 0 0 0 41.453 13.286 A 321.73 321.73 0 0 0 41.19 11.288 Q 41.033 10.115 40.858 9.135 Q 40.543 7.28 39.72 5.565 Q 39.322 4.734 38.821 4.142 A 4.265 4.265 0 0 0 37.638 3.15 A 0.102 0.102 0 0 1 37.628 3.149 Q 37.599 3.146 37.541 3.129 A 1.741 1.741 0 0 1 37.498 3.115 Q 37.078 3.01 36.658 2.94 Q 36.449 2.905 36.24 2.931 A 1.607 1.607 0 0 0 35.818 3.045 Q 35.153 4.06 34.348 4.917 A 6.155 6.155 0 0 0 33.875 5.486 A 6.959 6.959 0 0 0 33.053 6.965 Q 32.939 6.965 32.884 7.025 A 0.182 0.182 0 0 0 32.843 7.105 Q 32.808 7.245 32.598 7.245 A 30.947 30.947 0 0 0 32.428 7.535 A 33.652 33.652 0 0 0 30.253 12.058 Q 29.238 14.63 28.223 17.22 Q 28.201 17.307 28.22 17.395 A 0.449 0.449 0 0 0 28.258 17.5 A 0.66 0.66 0 0 1 28.293 17.71 Q 27.978 17.955 27.663 18.777 A 10.343 10.343 0 0 0 27.407 19.535 A 13.213 13.213 0 0 0 27.138 20.615 A 10.816 10.816 0 0 0 26.987 21.532 A 8.127 8.127 0 0 0 26.928 22.487 A 4.253 4.253 0 0 0 26.931 22.66 Q 26.949 23.105 27.064 23.394 A 0.983 0.983 0 0 0 27.243 23.695 A 2.534 2.534 0 0 0 27.394 23.583 A 2.037 2.037 0 0 0 28.03 22.732 A 6.1 6.1 0 0 0 28.138 22.438 A 6.908 6.908 0 0 0 28.38 21.49 A 11.946 11.946 0 0 1 28.482 20.996 A 9.657 9.657 0 0 1 28.678 20.265 A 8.579 8.579 0 0 1 28.837 19.796 A 9.775 9.775 0 0 1 29.465 18.445 Q 29.973 17.535 30.393 16.555 Q 30.778 15.645 31.303 14.77 A 48.946 48.946 0 0 0 31.433 14.552 A 44.379 44.379 0 0 0 32.283 13.055 A 14.801 14.801 0 0 1 32.56 12.578 A 17.504 17.504 0 0 1 33.088 11.76 Q 33.543 11.095 33.928 10.5 A 44.326 44.326 0 0 1 34.45 9.708 A 37.36 37.36 0 0 1 35.31 8.487 Q 35.993 7.56 37.043 7.07 Q 37.638 7.63 37.813 8.4 A 107.232 107.232 0 0 1 38.079 9.853 Q 38.214 10.618 38.352 11.457 A 191.086 191.086 0 0 1 38.688 13.58 Q 39.143 16.555 39.633 19.425 A 3.203 3.203 0 0 1 39.698 19.555 Q 39.961 20.112 40.07 20.877 Q 40.193 21.735 40.315 22.627 Q 40.438 23.52 40.683 24.29 A 8.541 8.541 0 0 0 40.93 24.374 A 9.294 9.294 0 0 0 42.765 24.763 A 3.143 3.143 0 0 0 42.806 24.767 Q 43.881 24.872 44.568 24.185 Q 45.478 23.275 46.16 21.98 A 30.209 30.209 0 0 0 46.245 21.818 A 32.969 32.969 0 0 0 47.438 19.25 Q 48.033 17.815 48.663 16.485 Q 49.888 13.895 50.99 11.305 Q 52.093 8.715 52.863 6.405 A 0.522 0.522 0 0 1 52.83 6.369 Q 52.801 6.334 52.784 6.3 A 0.233 0.233 0 0 1 52.758 6.195 L 52.758 5.985 L 52.758 5.81 A 0.079 0.079 0 0 0 52.748 5.806 Q 52.692 5.787 52.596 5.846 A 0.699 0.699 0 0 0 52.548 5.88 Q 52.43 5.939 52.386 5.849 A 0.204 0.204 0 0 1 52.373 5.81 A 1.122 1.122 0 0 0 52.396 5.801 Q 52.502 5.755 52.542 5.71 A 0.096 0.096 0 0 0 52.565 5.67 A 0.237 0.237 0 0 0 52.566 5.666 Q 52.574 5.634 52.57 5.609 A 0.078 0.078 0 0 0 52.548 5.565 A 0.147 0.147 0 0 1 52.543 5.547 Q 52.529 5.474 52.61 5.439 A 0.286 0.286 0 0 1 52.653 5.425 A 0.325 0.325 0 0 1 52.673 5.438 Q 52.787 5.519 52.844 5.703 A 1.133 1.133 0 0 1 52.88 5.863 L 52.933 6.195 Q 53.003 5.81 53.143 5.407 Q 53.283 5.005 53.423 4.585 Q 53.738 3.78 53.948 2.975 A 2.607 2.607 0 0 0 53.962 2.918 Q 54.027 2.646 54.027 2.381 Z" id="1" vector-effect="non-scaling-stroke" />
            </g>
          </svg>


        </a>
      </div>

      <ul className={navLinkClassName}>
        {links.map((elm, index) => (
          <li key={`link-${index}`}>
            <a href={`#${elm}`} onClick={() => setIsClicked(!isClicked)}>
              {elm}
            </a>
          </li>
        ))}
      </ul>


      <div className="nav__toggle_button center">
        <div className='brightness center' onClick={() => setBrightness(!brightness)}>
          {brightness ? <Icons name="showBrightness" /> : <Icons name="hideBrightness" />}
        </div>
        <button className='center' onClick={() => setIsClicked(!isClicked)}>
          {isClicked ? <Icons name="close" /> : <Icons name="menu" />}
        </button>
      </div>

    </nav>
  )
}

export default Navbar